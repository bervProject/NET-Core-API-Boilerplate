name: Build&Dockerize
on:
  push:
    branches: [ master ]
    tags:
      - v*
  pull_request:
    branches: [ master ]
env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: netcoreboilerplate
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage"
    - name: Report Codecov
      run: bash <(curl -s https://codecov.io/bash)
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: csharp
    # Here is where you build your code
    - run: |
      make bootstrap
      make release
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
  docker-test:
    runs-on: ubuntu-20.04
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        run: docker build . --file Dockerfile
  docker-push:
    # Ensure test job passes before pushing image.
    needs: build
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION